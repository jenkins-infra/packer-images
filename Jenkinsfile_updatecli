def flagRunUpdatecli

// returns a list of changed files only last commit ones
@NonCPS
List<String> getChangedFilesList() {
  changedFiles = []
  for (changeLogSet in currentBuild.changeSets) {
    for (entry in changeLogSet.getItems()) { // for each commit in the detected changes
      for (file in entry.getAffectedFiles()) {
        if (changedFiles.contains(file.getPath()) == false) {
          changedFiles.add(file.getPath()) // add changed file to list if not already in
        }
      }
    }
  }
  return changedFiles
}

stage('Which files') {
  flagRunUpdatecli = false

  if (env.BRANCH_IS_PRIMARY) {
    flagRunUpdatecli = true
  } else {
    def filelist = getChangedFilesList()  // Get all changed files for this commit
    echo "============= The list: ${filelist}"

    // Check if any changed file contains 'updatecli'
    if (filelist.any { it.contains('updatecli') }) {
        flagRunUpdatecli = true
    }
  }
}

stage('UpdateCli') {
  if (flagRunUpdatecli || pullRequest.labels.contains('run-updatecli')) {
    withCredentials([
      azureServicePrincipal('updatecli-azure-serviceprincipal'),
      string(credentialsId: 'updatecli-aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
      string(credentialsId: 'updatecli-aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
    ]) {
      if (env.BRANCH_IS_PRIMARY) {
          updatecli(action: 'apply', updatecliAgentLabel: 'linux-amd64-docker', cronTriggerExpression: '@daily')
      } else {
          updatecli(action: 'diff', updatecliAgentLabel: 'linux-amd64-docker')
      }
    }
  } else {
    currentBuild.result = 'ABORTED'
      error('no updatecli change to check in this commit')
  }
}
