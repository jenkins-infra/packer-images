
if (env.BRANCH_IS_PRIMARY) {
  properties([
    buildDiscarder(logRotator(numToKeepStr: '10')),
    // Daily build is enough: only the tagged build would generate downstream PRs on jenkins-infra
    pipelineTriggers([cron('@daily')]),
  ])
}

pipeline {
  agent none
  options {
    // Average build time is ~30 min. 1 hour timeout indicates that something is wrong and should fail
    timeout(time: 1, unit: 'HOURS')
  }
  stages {
    stage('Side Tasks') {
      parallel {
        stage('GC on AWS us-east-2') {
          agent {
            kubernetes {
              yamlFile 'CiPodTemplate.yaml'
            }
          }
          environment {
            AWS_ACCESS_KEY_ID     = credentials('packer-aws-access-key-id')
            AWS_SECRET_ACCESS_KEY = credentials('packer-aws-secret-access-key')
            AWS_DEFAULT_REGION    = 'us-east-2'
            DRYRUN                = "${env.BRANCH_NAME == 'main' ? 'false' : 'true'}"
          }
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh './cleanup/aws.sh'
              sh './cleanup/aws_images.sh'
            }
          }
        }
        stage('GC on Azure') {
          environment {
            PACKER_AZURE = credentials('packer-azure-serviceprincipal')
            DRYRUN = "${env.BRANCH_IS_PRIMARY ? 'false' : 'true'}"
          }

          agent {
            kubernetes {
              yamlFile 'CiPodTemplate.yaml'
            }
          }

          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh 'az login --service-principal -u "$PACKER_AZURE_CLIENT_ID" -p "$PACKER_AZURE_CLIENT_SECRET" -t "$PACKER_AZURE_TENANT_ID"'
              sh 'az account set -s "$PACKER_AZURE_SUBSCRIPTION_ID"'
              sh './cleanup/azure.sh'
            }
          }
        }
        stage('Updatecli') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              script {
                updatecli(action: 'diff')
                if (env.BRANCH_IS_PRIMARY) {
                  updatecli(action: 'apply', cronTriggerExpression: '@daily')
                }
              }
            }
          }
        }
      }
    }
    stage('Packer Images') {
      matrix {
        axes {
          axis {
            name 'PKR_VAR_architecture'
            values 'amd64', 'arm64'
          }
          axis {
            name 'PKR_VAR_agent'
            values 'ubuntu-20', 'windows-2019'
          }
          axis {
            name 'PKR_VAR_image_type'
            // "azure-arm" stands for "Azure Resource Manager", unrelated to arm64 CPU
            values 'amazon-ebs', 'azure-arm', 'docker'
          }
        }
        excludes {
          // Do NOT build ARM images in Azure
          exclude {
            axis {
              name 'PKR_VAR_architecture'
              values 'arm64'
            }
            axis {
              name 'PKR_VAR_image_type'
              values 'azure-arm'
            }
          }
          // Only build Ubuntu images for arm64 CPU in AWS
          exclude {
            axis {
              name 'PKR_VAR_architecture'
              values 'arm64'
            }
            axis {
              name 'PKR_VAR_agent'
              notValues 'ubuntu-20'
            }
            axis {
              name 'PKR_VAR_image_type'
              values 'amazon-ebs'
            }
          }
          // No build on Windows or Docker, not yet implemented
          exclude {
            axis {
              name 'PKR_VAR_agent'
              values 'windows-2019'
            }
            axis {
              name 'PKR_VAR_image_type'
              values 'docker'
            }
          }
        }
        agent {
          // Temporary forcing exception for windows/docker which is not finished yet
          label "${env.PKR_VAR_agent == 'windows-2019' && env.PKR_VAR_image_type == 'docker' ? 'windows' : 'linux'}-${PKR_VAR_architecture}-docker"
        }
        environment {
          AWS_ACCESS_KEY_ID             = credentials('packer-aws-access-key-id')
          AWS_SECRET_ACCESS_KEY         = credentials('packer-aws-secret-access-key')
          PACKER_HOME_DIR               = "/tmp/packer.d.${PKR_VAR_image_type}.${PKR_VAR_architecture}.${PKR_VAR_agent}"
          PACKER_PLUGIN_PATH            = "${PACKER_HOME_DIR}/plugins"
          PACKER_VARS_FILE              = ".auto.pkrvars.hcl"
          // Reuse the updatecli Github token to ensure that packer init does not hit the rate limit
          GITHUB_IAT_TOKEN              = credentials('github-app-infra')
        }
        stages {
          stage('Prepare on primary branch') {
            when {
              expression { env.BRANCH_IS_PRIMARY }
            }
            steps {
              sh '''
              echo 'build_type = "staging"' >> "${PACKER_VARS_FILE}"
              '''
            }
          }
          stage('Prepare on Tag') {
            when {
              buildingTag()
            }
            steps {
              sh '''
              set -eu
              echo 'build_type = "prod"' >> "${PACKER_VARS_FILE}"
              echo 'image_version = "'${TAG_NAME}'"' >> "${PACKER_VARS_FILE}"
              '''
            }
          }
          stage('Prepare and Report') {
            steps {
              withEnv(["PACKER_GITHUB_API_TOKEN=${GITHUB_IAT_TOKEN_PSW}"]) {
                sh '''
                echo 'scm_ref = "'"$(git rev-parse --short --verify HEAD)"'"' >> "${PACKER_VARS_FILE}"
                ./run-packer.sh report
                '''
              }
            }
          }
          stage('Validate') {
            steps {
              withEnv(["PACKER_GITHUB_API_TOKEN=${GITHUB_IAT_TOKEN_PSW}"]) {
                sh './run-packer.sh validate'
              }
            }
          }
          stage('Build') {
            steps {
              withCredentials([azureServicePrincipal(
                credentialsId: 'packer-azure-serviceprincipal',
                clientIdVariable: 'PKR_VAR_azure_client_id',
                clientSecretVariable: 'PKR_VAR_azure_client_secret',
                subscriptionIdVariable: 'PKR_VAR_azure_subscription_id'
              )]) {
                withEnv(["PACKER_GITHUB_API_TOKEN=${GITHUB_IAT_TOKEN_PSW}"]) {
                  sh './run-packer.sh build'
                }
              }
            }
          }
        }
      }
    }
  }
}
