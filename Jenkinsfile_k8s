def isPrimaryBranch = false
if (env.BRANCH_IS_PRIMARY) {
  isPrimaryBranch = true
  properties([
    buildDiscarder(logRotator(numToKeepStr: '10')),
    // Daily build is enough: only the tagged build would generate downstream PRs on jenkins-infra
    pipelineTriggers([cron('@daily')]),
  ])
}

final String podAgentDefinition = '''
apiVersion: v1
kind: Pod
spec:
  automountServiceAccountToken: false
  containers:
    - name: jnlp
      image: jenkinsciinfra/hashicorp-tools:latest
'''

pipeline {
  agent none
  options {
    // Average build time is ~30 min. 1h30 hour timeout indicates that something is wrong and should fail
    timeout(time: 90, unit: 'MINUTES')
  }
  stages {
    stage('Side Tasks') {
      environment {
        DRYRUN = "${env.BRANCH_IS_PRIMARY ? 'false' : 'true'}"
      }
      parallel {
        stage('GC on AWS us-east-2') {
          agent {
            kubernetes {
              yaml podAgentDefinition
            }
          }
          environment {
            AWS_ACCESS_KEY_ID     = credentials('packer-aws-access-key-id')
            AWS_SECRET_ACCESS_KEY = credentials('packer-aws-secret-access-key')
            AWS_DEFAULT_REGION    = 'us-east-2'
          }
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh './cleanup/aws.sh'
              sh './cleanup/aws_images.sh'
            }
          }
        }
        stage('GC on Azure') {
          agent {
            kubernetes {
              yaml podAgentDefinition
            }
          }
          environment {
            PACKER_AZURE = credentials('packer-azure-serviceprincipal')
          }
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh 'az login --service-principal -u "$PACKER_AZURE_CLIENT_ID" -p "$PACKER_AZURE_CLIENT_SECRET" -t "$PACKER_AZURE_TENANT_ID"'
              sh 'az account set -s "$PACKER_AZURE_SUBSCRIPTION_ID"'
              sh './cleanup/azure.sh'
            }
          }
        }
        stage('Updatecli') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              script {
                updatecli(action: 'diff', containerMemory: '1024Mi')
                if (env.BRANCH_IS_PRIMARY) {
                  updatecli(action: 'apply', cronTriggerExpression: '@daily', containerMemory: '1024Mi')
                }
              }
            }
          }
        }
      }
    }
    stage('Packer Images') {
      matrix {
        axes {
          axis {
            name 'cpu_architecture'
            values 'amd64', 'arm64'
          }
          axis {
            name 'agent_type'
            values 'ubuntu-20.04', 'windows-2019', 'windows-2022'
          }
          axis {
            name 'compute_type'
            // "azure-arm" stands for "Azure Resource Manager", unrelated to arm64 CPU
            values 'amazon-ebs', 'azure-arm', 'docker'
          }
        }
        excludes {
          // Do NOT build ARM images in Azure
          exclude {
            axis {
              name 'cpu_architecture'
              values 'arm64'
            }
            axis {
              name 'compute_type'
              values 'azure-arm'
            }
          }
          // Only build Ubuntu images for arm64 CPU in AWS
          exclude {
            axis {
              name 'cpu_architecture'
              values 'arm64'
            }
            axis {
              name 'agent_type'
              notValues 'ubuntu-20.04'
            }
            axis {
              name 'compute_type'
              values 'amazon-ebs'
            }
          }
          // No build on Windows or Docker, not yet implemented
          exclude {
            axis {
              name 'agent_type'
              values 'windows-2019'
            }
            axis {
              name 'compute_type'
              values 'docker'
            }
          }
          exclude {
            axis {
              name 'agent_type'
              values 'windows-2022'
            }
            axis {
              name 'compute_type'
              values 'docker'
            }
          }
        }
        agent {
          label "linux-${env.cpu_architecture}-docker"
        }
        environment {
          AWS_ACCESS_KEY_ID             = credentials('packer-aws-access-key-id')
          AWS_SECRET_ACCESS_KEY         = credentials('packer-aws-secret-access-key')
          // Define Packer Input variables through environment variables prefixed with 'PKR_VAR_'
          // Re.f https://www.packer.io/docs/templates/hcl_templates/variables#assigning-values-to-build-variables
          PKR_VAR_build_type            = "${env.TAG_NAME ? 'prod' : (env.BRANCH_IS_PRIMARY ? 'staging' : 'dev') }"
          PKR_VAR_image_version         = "${env.TAG_NAME ?: ''}"
          PKR_VAR_scm_ref               = "${env.GIT_COMMIT}"
          PKR_VAR_agent_os_type         = "${env.agent_type.split('-')[0]}"
          PKR_VAR_agent_os_version      = "${env.agent_type.split('-')[1]}"
          PKR_VAR_architecture          = "${env.cpu_architecture}"
          PKR_VAR_image_type            = "${env.compute_type}"
          PATH                          = "${WORKSPACE}/.bin:${env.PATH}" // Required if packer needs to be installed
        }
        stages {
          stage('Build Template') {
            steps {
              // Pass the Azure credentials through Packer Input variables, as environment variables prefixed with 'PKR_VAR_'
                // Re.f https://www.packer.io/docs/templates/hcl_templates/variables#assigning-values-to-build-variables
              withCredentials([azureServicePrincipal(
                credentialsId: 'packer-azure-serviceprincipal',
                clientIdVariable: 'PKR_VAR_azure_client_id',
                clientSecretVariable: 'PKR_VAR_azure_client_secret',
                subscriptionIdVariable: 'PKR_VAR_azure_subscription_id'
              ),]) {
                // Required if packer needs to be installed
                sh 'command -v packer >/dev/null 2>&1 || bash ./install-packer.sh "${WORKSPACE}/.bin" "1.8.0"'

                // Help auditing pipeline execution
                sh '''
                echo "= Current Packer environment:"
                env | grep -i PKR_VAR
                env | grep -i PACKER
                '''

                // Initialize the project. To avoid hitting GitHub APi rate limit, Packer authenticates
                // with an API token (auto-generated IAT, valid for 1 hour) provided to the environment variable PACKER_GITHUB_API_TOKEN
                withCredentials([usernamePassword(credentialsId: 'github-app-infra',usernameVariable: 'UNUSED',passwordVariable: 'PACKER_GITHUB_API_TOKEN')]) {
                  sh 'packer init ./'
                }

                // Validate template (for all elements)
                sh 'packer validate ./'

                // Execute build only for this matrix cell's setup
                retry(count: 2, conditions: [kubernetesAgent(handleNonKubernetes: true), nonresumable()]) {
                  sh 'packer build -timestamp-ui -force -only="${PKR_VAR_image_type}.${PKR_VAR_agent_os_type}" ./'
                }
              }
            }
          }
          stage('Publish Docker image') {
            steps {
              script {
                if (isPrimaryBranch && env.TAG_NAME && (env.compute_type == 'docker')) {
                  infra.withDockerPushCredentials {
                    def dockerImage = "jenkinsciinfra/jenkins-agent-${env.agent_type}:${env.TAG_NAME}"
                    docker push dockerImage
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
