//!/usr/bin/env groovy
//default node for pipeline and stages except for the amd/intel builds
String nodeLabel="linux-arm64-docker"

// Initialize the packer project by installing the plugins in $PACKER_HOME_DIR/ - ref. https://www.packer.io/docs/configure
// This function must be called for each distinct agent but only one time (as plugins are OS and CPU specifics)
def packerInitPlugins() {
  // Authenticating to the GitHub API with an API token (auto-generated IAT, valid for 1 hour) provided to the environment variable PACKER_GITHUB_API_TOKEN
  // to avoid hitting the rate limit. Ref. https://www.packer.io/docs/commands/init.
  withCredentials([
    usernamePassword(
      credentialsId: 'github-app-infra',
      usernameVariable: 'UNUSED',
      passwordVariable: 'PACKER_GITHUB_API_TOKEN'
    )
  ]) {
    // Cleanup any remnant of packer plugins on this agent
    sh 'rm -rf /home/jenkins/.config /home/jenkins/.packer*'
    sh 'packer init ./'
  }
}

if (env.BRANCH_IS_PRIMARY) {
    properties([
        buildDiscarder(logRotator(numToKeepStr: '10')),
        // Daily build is enough: only the tagged build would generate downstream PRs on jenkins-infra
        pipelineTriggers([cron('@daily')]),
        // Do not build concurently on the principal branch (to avoid Azure ARM issues with shared resources)
        disableConcurrentBuilds(),
    ])
}

if (env.CHANGE_ID) {
  properties([
    // Do not build concurently on pull requests (to avoid Azure ARM issues with shared resources), and abort previous running build
    disableConcurrentBuilds(abortPrevious: true)
  ])
}

// Average build time is ~50 min but windows can takes 45min of updates on AWS
timeout(time: 120, unit: 'MINUTES') {

  // main script block
  node(nodeLabel) {
    // To allow using ASDF shims
    env.PATH = "${env.PATH}:/home/jenkins/.asdf/shims:/home/jenkins/.asdf/bin"
    env.DRYRUN = "${env.BRANCH_IS_PRIMARY ? 'false' : 'true'}"

    // Define parrallels stages
    def sidestages = [failFast:false]

    // sidestages["updatecli"] = {
    //   // TODO: Implement https://github.com/jenkins-infra/pipeline-library/issues/518 to allow using the updatecli() library function
    //   withCredentials([
    //     usernamePassword(
    //       credentialsId: 'github-app-updatecli-on-jenkins-infra',
    //       usernameVariable: 'USERNAME_VALUE', // Setting this variable is mandatory, even if of not used when the credentials is a githubApp one
    //       passwordVariable: 'UPDATECLI_GITHUB_TOKEN'
    //     )
    //   ]) {
    //     sh 'updatecli version'
    //     sh 'updatecli diff --values ./updatecli/values.yaml --config ./updatecli/updatecli.d'
    //     if (env.BRANCH_IS_PRIMARY) {
    //       sh 'updatecli apply --values ./updatecli/values.yaml --config ./updatecli/updatecli.d'
    //     }
    //   }
    // }

    // sidestages["GC on AWS us-east-2"] = {
    //   env.AWS_DEFAULT_REGION    = 'us-east-2'
    //   withCredentials([
    //     string(
    //         credentialsId: 'packer-aws-access-key-id',
    //         variable: 'AWS_ACCESS_KEY_ID'
    //     ),
    //     string(
    //         credentialsId: 'packer-aws-secret-access-key',
    //         variable: 'AWS_SECRET_ACCESS_KEY'
    //     )
    //   ]) {
    //     catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
    //       sh './cleanup/aws.sh'
    //       sh './cleanup/aws_images.sh 1 dev'
    //       sh './cleanup/aws_images.sh 7 staging'
    //       sh './cleanup/aws_images.sh 60 prod'
    //       sh './cleanup/aws_snapshots.sh'
    //     }
    //   }
    // }

    // sidestages["GC on Azure"] = {
    //   withCredentials([
    //     azureServicePrincipal(
    //       credentialsId: 'packer-azure-serviceprincipal',
    //       subscriptionIdVariable: 'PACKER_AZURE_SUBSCRIPTION_ID',
    //       clientIdVariable: 'PACKER_AZURE_CLIENT_ID',
    //       clientSecretVariable: 'PACKER_AZURE_CLIENT_SECRET',
    //       tenantIdVariable: 'PACKER_AZURE_TENANT_ID'
    //     )
    //   ]) {
    //     catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
    //       sh 'az login --service-principal -u "$PACKER_AZURE_CLIENT_ID" -p "$PACKER_AZURE_CLIENT_SECRET" -t "$PACKER_AZURE_TENANT_ID"'
    //       sh 'az account set -s "$PACKER_AZURE_SUBSCRIPTION_ID"'
    //       sh './cleanup/azure_gallery_images.sh 1 dev'
    //       sh './cleanup/azure_gallery_images.sh 7 staging'
    //       sh './cleanup/azure.sh 1 dev'
    //       sh './cleanup/azure.sh 1 staging'
    //       sh './cleanup/azure.sh 1 prod'
    //     }
    //   }
    // }

    def buildstages = [:]
    // packer builds
    def listbuilds = [
      // [cpu_architecture:'amd64', agent_type:'ubuntu-22.04', compute_type:'azure-arm'],
      // [cpu_architecture:'amd64', agent_type:'ubuntu-22.04', compute_type:'docker'],
      // [cpu_architecture:'amd64', agent_type:'windows-2019', compute_type:'azure-arm'],
      // [cpu_architecture:'amd64', agent_type:'windows-2022', compute_type:'azure-arm'],
      // [cpu_architecture:'arm64', agent_type:'ubuntu-22.04', compute_type:'amazon-ebs'],
      [cpu_architecture:'arm64', agent_type:'ubuntu-22.04', compute_type:'azure-arm'],
      // [cpu_architecture:'arm64', agent_type:'ubuntu-22.04', compute_type:'docker']
    ]
    for(int i = 0; i < listbuilds.size(); i++) {
      String stagetitle="Build ${listbuilds[i].cpu_architecture} ${listbuilds[i].agent_type} ${listbuilds[i].compute_type} image"
      // dynamically choose node to use
      if (listbuilds[i].compute_type == 'docker' && listbuilds[i].cpu_architecture == 'amd64') {
        nodeLabel = "linux-amd64-docker"
      }
      String pkr_var_agent_os_type = listbuilds[i].agent_type.split('-')[0]
      String pkr_var_agent_os_version = listbuilds[i].agent_type.split('-')[1]
      String pkr_var_architecture = listbuilds[i].cpu_architecture
      String pkr_var_image_type = listbuilds[i].compute_type
      String pkr_var_tag_name = env.TAG_NAME

      echo stagetitle
      echo pkr_var_agent_os_type
      echo pkr_var_agent_os_version
      echo pkr_var_architecture
      echo pkr_var_image_type
      echo pkr_var_tag_name


      buildstages[stagetitle] = {
        node(nodeLabel) {
          env.AWS_DEFAULT_REGION    = 'us-east-2'
          withCredentials([
            string(
                credentialsId: 'packer-aws-access-key-id',
                variable: 'AWS_ACCESS_KEY_ID'
            ),
            string(
                credentialsId: 'packer-aws-secret-access-key',
                variable: 'AWS_SECRET_ACCESS_KEY'
            ),
            azureServicePrincipal(
              credentialsId: 'packer-azure-serviceprincipal',
              subscriptionIdVariable: 'PACKER_AZURE_SUBSCRIPTION_ID',
              clientIdVariable: 'PACKER_AZURE_CLIENT_ID',
              clientSecretVariable: 'PACKER_AZURE_CLIENT_SECRET',
              tenantIdVariable: 'PACKER_AZURE_TENANT_ID'
            ),
            usernamePassword(
              credentialsId: 'github-app-infra',
              usernameVariable: 'UNUSED',
              passwordVariable: 'PACKER_GITHUB_API_TOKEN'
            )
          ]) {
            echo "build for: ${pkr_var_image_type}.${pkr_var_agent_os_type} ${pkr_var_agent_os_type}-${pkr_var_agent_os_version}:latest jenkinsciinfra/jenkins-agent-${pkr_var_agent_os_type}-${pkr_var_agent_os_version}:${pkr_var_architecture}"

            checkout scm
            // Cleanup any remnant of packer plugins on this agent
            sh 'rm -rf /home/jenkins/.config /home/jenkins/.packer*'
            sh 'packer init ./'
            // packer validate
            sh 'PACKER_LOG=1 packer validate ./'
            // Execute build only for this matrix cell's setup
            retry(count: 2, conditions: [kubernetesAgent(handleNonKubernetes: true), nonresumable()]) {
              sh "packer build -timestamp-ui -force -only=${pkr_var_image_type}.${pkr_var_agent_os_type} ./"
              // adding manually a cpu architecture tag to the docker image
              if (pkr_var_image_type == 'docker') {
                sh 'docker tag "jenkinsciinfra/jenkins-agent-${pkr_var_agent_os_type}-${pkr_var_agent_os_version}:latest" "jenkinsciinfra/jenkins-agent-${pkr_var_agent_os_type}-${pkr_var_agent_os_version}:${pkr_var_architecture}"'
              }
            }
            // if docker and building a tag, push to dockerhub from inside the node
            // else we would loose the docker image
            if (pkr_var_image_type == 'docker' && pkr_var_tag_name != null) {
              stage('Publish all tags for Docker image') {
                echo "Pushing jenkinsciinfra/jenkins-agent-${pkr_var_agent_os_type}:${pkr_var_tag_name} & jenkinsciinfra/jenkins-agent-${pkr_var_agent_os_type}:latest for ${pkr_var_architecture}"
                infra.withDockerPushCredentials {
                  sh "docker push --all-tags jenkinsciinfra/jenkins-agent-${agent_type}"
                }
              }
            }
          }
        }
      }
    }

    //run in parallel
    parallel(sidestages + buildstages)

    // after parallel
    stage('Build Docker Manifest') {
      if (env.TAG_NAME != null){
        // Static variable definition as this stage is outside the matrix scope
        // Improvement: pass dynamically the list of images from the matrix (e.g. use full scripted pipeline) to support other Docker agent types (such as windows-2019 or windows-2022)
        agent_type = 'ubuntu-22.04'
        infra.withDockerPushCredentials {
          sh 'docker manifest create \
              jenkinsciinfra/jenkins-agent-${agent_type}:latest \
              --amend jenkinsciinfra/jenkins-agent-${agent_type}:arm64 \
              --amend jenkinsciinfra/jenkins-agent-${agent_type}:amd64'
          sh 'docker manifest push jenkinsciinfra/jenkins-agent-"${agent_type}":latest'

          sh 'docker manifest create \
              jenkinsciinfra/jenkins-agent-${agent_type}:${TAG_NAME} \
              --amend jenkinsciinfra/jenkins-agent-${agent_type}:arm64 \
              --amend jenkinsciinfra/jenkins-agent-${agent_type}:amd64'
          sh 'docker manifest push jenkinsciinfra/jenkins-agent-"${agent_type}":"${TAG_NAME}"'
        }
      }
    }
  }
}
